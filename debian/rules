#!/usr/bin/make -f

export V=1

# sets DEBIAN_VERSION variable
include /usr/share/dpkg/pkg-info.mk

# Get the Debian version revision:
DEB_REVISION := $(word 2, $(subst -, ,$(DEB_VERSION)))

# sets DEB_HOST_* variables
include /usr/share/dpkg/architecture.mk

# Ubuntu ld adds -Bsymbolic-functions by default, but that prevents FFmpeg from building.
export DEB_LDFLAGS_MAINT_STRIP=-Wl,-Bsymbolic-functions

# Package name for the extra flavor.
SHLIB_PKGS := $(shell sed -nr '/extra/! s/^Package:[[:space:]]*(lib.*[0-9]+)[[:space:]]*$$/\1/p' debian/control)
FLAVORS = standard static

# Most possible features, compatible with effective licensing of GPLv2+
CONFIG := --prefix=/usr \
	--extra-version="$(DEB_REVISION)" \
	--toolchain=hardened \
	--libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
	--incdir=/usr/include/$(DEB_HOST_MULTIARCH) \
	--arch=$(DEB_HOST_ARCH_CPU) \
	--disable-sse4 \
	--disable-opencl \
	--disable-doc \
	--disable-programs \
	--disable-everything \
	--disable-iconv \
	--disable-xlib \
	--disable-libxcb \
	--disable-libxcb_shape \
	--disable-libxcb_shm \
	--disable-libxcb_xfixes \
	--disable-cuda_llvm \
	--disable-stripping \
	--enable-avutil \
	--enable-avformat \
	--enable-avcodec \
	--enable-swscale \
	--enable-libvpx \
	--enable-decoder=vp8 \
	--enable-parser=vp8 \
	--enable-demuxer=webm_dash_manifest \
	--enable-demuxer=matroska \
	--enable-decoder=h264 \
	--enable-demuxer=h264 \
	--enable-parser=h264 \
	--enable-parser=mpegaudio \
	--enable-demuxer=wav \
	--enable-parser=aac \
	--enable-demuxer=aac \
	--enable-decoder=aac \
	--enable-protocol=file \
	--enable-dct

# link with -latomic on armel and mipsel (https://trac.ffmpeg.org/ticket/9275)
ifneq (,$(filter armel mipsel,$(DEB_HOST_ARCH)))
CONFIG += --extra-libs=-latomic
endif

# The standard configuration only uses the shared CONFIG.
CONFIG_standard = --enable-shared

# Do not enable libsmbclient support on hurd-i386
ifeq (,$(filter hurd-i386,$(DEB_HOST_ARCH)))
	CONFIG_extra += --enable-libsmbclient
endif

# The static libraries should not be built with PIC.
CONFIG_static = --disable-pic \
	--disable-doc \
	--disable-programs

# Disable optimizations if requested.
ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
	CONFIG += --disable-optimizations
endif

# Respect CC/CXX from the environment, if they differ from the default.
# Don't set them if they equal the default, because that disables autodetection needed for cross-building.
ifneq (cc,$(CC))
	CONFIG += --cc=$(CC)
endif
ifneq (g++,$(CXX))
	CONFIG += --cxx=$(CXX)
endif

# Disable altivec optimizations on powerpc, because they are not always available on this architecture.
ifeq (powerpc,$(DEB_HOST_ARCH))
	CONFIG += --disable-altivec
	# Build an altivec flavor of the libraries on powerpc.
	# This works around the problem that runtime cpu detection on powerpc currently does not work,
	# because, if altivec is enabled, all files are build with '-maltivec' so that the compiler inserts altivec instructions, wherever it likes.
	CONFIG_altivec = --enable-shared \
		--enable-altivec \
		--disable-doc \
		--disable-programs
	CONFIG_altivec-extra = $(CONFIG_altivec) $(CONFIG_extra)
	FLAVORS += altivec altivec-extra
endif

# Disable assembly optimizations on x32, because they don't work (yet).
ifneq (,$(filter x32,$(DEB_HOST_ARCH)))
	CONFIG += --disable-asm
endif

# Disable some optimizations on mips*, because they are not always available on these architectures
ifneq (,$(filter mips%r6 mips%r6el, $(DEB_HOST_ARCH)))
	MIPS_R2_R6_CONFIG = --disable-mips32r2 \
		--disable-mips64r2
else
	MIPS_R2_R6_CONFIG = --disable-mips32r6 \
		--disable-mips64r6
endif

ifneq (,$(filter mips%,$(DEB_HOST_ARCH)))
	CONFIG += --disable-mipsdsp \
		--disable-mipsdspr2 \
		--disable-loongson2 \
		--disable-loongson3 \
		--disable-mmi \
		--disable-mips32r5 \
		$(MIPS_R2_R6_CONFIG) \
		--disable-msa \
		--disable-msa2
endif

# Disable mipsfpu on mips and mipsel, because it is not compatible with the FPXX ABI
ifneq (,$(filter mips mipsel,$(DEB_HOST_ARCH)))
	CONFIG += --disable-mipsfpu
endif

# Disable some tests which fail when FLT_EVAL_METHOD != 0 (found on i386, m68k and s390x)
ifneq (,$(filter i386 m68k s390x,$(DEB_HOST_ARCH_CPU)))
	CONFIG += --ignore-tests=hapenc-hap-none,hapenc-hapa-none,hapenc-hapq-none
endif

# Set cross-build prefix for compiler, pkg-config...
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
	CONFIG += --cross-prefix=$(DEB_HOST_GNU_TYPE)- \
		--target-os=$(DEB_HOST_ARCH_OS)
endif

# Use the default debhelper scripts, where possible.
%:
	dh $@ --with pkgkde_symbolshelper

# Add configuration options:
override_dh_auto_configure: $(patsubst %,configure_%,$(FLAVORS))
configure_%:
	$(info $()   debian/rules $@)
	mkdir -p debian/$*
	cd debian/$* && ../../configure $(strip $(CONFIG) $(CONFIG_$*)) || (cat ffbuild/config.log && exit 1)

# Remove the subdirectories generated for the flavors.
override_dh_auto_clean:
	rm -rf $(patsubst %,debian/%,$(FLAVORS))

# Create doxygen documentation:
override_dh_auto_build-indep:
	dh_auto_build -i --sourcedirectory=debian/standard -- apidoc documentation
	# Create the minified CSS files.
	#  Due to https://github.com/nodejs/node/issues/14752 where nodejs will
	#  leave set O_NONBLOCK on stderr, we pipe stderr through cat which will
	#  create a temporary pipe so this doesn't break the rest of the build.
	#  See: #895154
	(lessc debian/missing-sources/ffmpeg-web/src/less/style.less | cleancss > debian/standard/doc/style.min.css) 2>&1 | cat >&2

override_dh_auto_build-arch: $(patsubst %,build_%,$(FLAVORS))

# noop fallback for below more specific targets
prebuild_%:
	:

# Copy built object files to avoid building them again for the extra flavor.
$(patsubst %,prebuild_%,$(filter %extra,$(FLAVORS))): prebuild_%: build_standard
	$(info $()   debian/rules $@)
	$(eval subdir = debian/$(subst extra,standard,$(subst -extra,,$*)))
	cd $(subdir) && find libavcodec libavdevice libavfilter libavformat libavutil libpostproc libswscale libswresample \
		-type f -name '*.o' \
		-exec install -m 644 -D -T '{}' '../$*/{}' ';'
	rm debian/$*/libavcodec/allcodecs.o
	rm debian/$*/libavfilter/allfilters.o

# Build qt-faststart here, to make it possible to build with 'nocheck'.
prebuild_standard:
	$(info $()   debian/rules $@)
	$(MAKE) -C debian/standard tools/qt-faststart

build_%: prebuild_%
	$(info $()   debian/rules $@)
	dh_auto_build -a --sourcedirectory=debian/$* || (cat debian/$*/config.log && exit 1)

# Set the library path for the dynamic linker, because the tests otherwise don't find the libraries.
override_dh_auto_test-arch:
	export LD_LIBRARY_PATH="libavcodec:libavdevice:libavfilter:libavformat:libavutil:libpostproc:libswresample:libswscale"; \
		dh_auto_test -a --sourcedirectory=debian/standard -- -k

# No tests for indep build.
override_dh_auto_test-indep:

override_dh_auto_install-arch:
	dh_auto_install -a --sourcedirectory=debian/standard
ifeq (powerpc,$(DEB_HOST_ARCH))
	install -d debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)/altivec
	install -m 644 debian/altivec/*/*.so.* debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)/altivec
endif

ifeq (powerpc,$(DEB_HOST_ARCH))
	install -d debian/tmp/extra/usr/lib/$(DEB_HOST_MULTIARCH)/altivec
	install -m 644 debian/altivec-extra/*/*.so.* debian/tmp/extra/usr/lib/$(DEB_HOST_MULTIARCH)/altivec
endif
	# Use the static libraries from the --disable-pic build
	install -m 644 debian/static/*/lib*.a debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)

override_dh_auto_install-indep:
	$(MAKE) -C debian/standard DESTDIR=$(CURDIR)/debian/tmp install-doc install-examples
	# Create index.html page for the FFmpeg manual
	cd debian/tmp/usr/share/doc/ffmpeg && tree -H '.' -L 1 -P '*.html' --noreport --charset utf-8 -T 'FFmpeg Manual Index' -o index.html

override_dh_install:
	dh_install --sourcedir=debian/tmp/standard
	dh_install --remaining-packages

override_dh_shlibdeps:
	$(RM) debian/shlibs.local
	set -e && for pkg in $(SHLIB_PKGS); do \
		lib=`echo $$pkg | sed 's/\([a-z]*\)\([0-9]*\)/\1/'`; \
		abi=`echo $$pkg | sed 's/\([a-z]*\)\([0-9]*\)/\2/'`; \
		ver=${DEB_VERSION}; \
		echo "$$lib $$abi $$pkg (= $$ver)" >> debian/shlibs.local; \
	done
	set -e && for pkg in $(EXTRA_PKGS); do \
		mainpkg=`echo $$pkg | sed 's/-extra//'`; \
		cp -f debian/$$mainpkg.symbols debian/$$pkg.symbols; \
		dh_shlibdeps -p$$pkg; \
		rm -f debian/$$pkg.symbols; \
	done
	dh_shlibdeps --remaining-packages

# avoid error: Unknown DWARF DW_OP_0
override_dh_dwz:
	dh_dwz -Xlibavcodec -Xlibavfilter -Xlibavutil -Xlibswresample -Xlibswscale
